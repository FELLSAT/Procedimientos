CREATE OR REPLACE PACKAGE BODY PKG_ACOMER_RESTAURANTES 
 -- =============================================      
 -- Author:  FELIPE SATIZABAL
 -- =============================================
AS
-- =============================================
-- INFORMACION DE LAS MESAS PARA LA CARGA INICIAL
	PROCEDURE SP_ACOMER_MESAS
	(
		CURSOR_MESAS OUT SYS_REFCURSOR --CURSOR QUE TENDRA LOS DATOS DE LA MESA (EMP, IDENTIFICADOR, PUESTOS, COORDENADAS)
	)
	AS
	BEGIN
		OPEN CURSOR_MESAS FOR
			SELECT INV.MESCOD COD_MESA,
				CASE TRIM(INV.MESESTADO)
	                WHEN 'Ocupado' THEN
	                    '0'
	                ELSE '1'
			    END ESTADO,
			    --NVL(TRIM(INV.MESESTADO),'Activo') ESTADO,
			    DM.EMPCOD COD_EMPRESA,
			    DM.POSMES POSICION,
			    CASE DM.PUESTOS
					WHEN 0 THEN 4
					ELSE DM.PUESTOS
				END PUESTOS,
			    --NVL(DM.PUESTOS, 4) PUESTOS,
			    INV.MESHORAPED ATENCION
			FROM INV00018 INV
			INNER JOIN DETMESA DM
			    ON DM.MESCOD = INV.MESCOD
			ORDER BY INV.MESCOD;			
	END SP_ACOMER_MESAS;

-- =============================================
-- INFORMACION DE LOS MENUS DE LOS RESTAURANTES
	PROCEDURE SP_ACOMER_MENU
	(
		CURSOR_CATEGORIAS OUT SYS_REFCURSOR,    -- CURSOR QUE TENDRA LOS DATOS DE  LAS CATEGORIAS DE COMIDAS
		CURSOR_SUBCATEGORIAS OUT SYS_REFCURSOR, -- CURSOR QUE TENDRA LOS DATOS DE LAS SUBCATEGORIAS DE COMIDAS
		CURSOR_TERMINOS OUT SYS_REFCURSOR,      -- CURSOR QUE TENDRA LOS DATOS DE LOS TERMINOS DE LA COMIDA EN CASO DE TENERLOS
		CURSOR_COMIDA OUT SYS_REFCURSOR			-- CRUSRO QUE TENDRA LOS DATOS DE CADA UNO DE LAS COMIDAD OFRECIDAS
	)
	AS
	BEGIN
	-- =============================================
	-- CATEGORIAS DE LAS COMIDAS
		OPEN CURSOR_CATEGORIAS FOR
			SELECT DISTINCT TRIM(CATECOD) COD_CATEGORIA,
				TRIM(CATEDES) DESCRIPCION,
				TRIM(CATIMG) IMAGEN
			FROM INV0013 
			WHERE CATEEMPCOD = '901.023.461-1'
				OR CATEEMPCOD = '901.023.461-2'
				-- ADICIONAR LAS DEMAS CODIGOS DE LOS RESTUARANTES QUE OFRECEN
			ORDER BY COD_CATEGORIA;

	-- =============================================
	-- SUBCATEGORIAS DE LAS COMIDAS
		OPEN CURSOR_SUBCATEGORIAS FOR
			SELECT DISTINCT TRIM(CATECOD) COD_CATEGORIA,
				TRIM(SUBCATECOD) COD_SUBCATEGORIA,
				TRIM(SUBCATEDES) DESCRIPCION
			FROM INV0014
			WHERE CATEEMPCOD = '901.023.461-1'
				OR CATEEMPCOD = '901.023.461-2'
				-- ADICIONAR LAS DEMAS CODIGOS DE LOS RESTUARANTES QUE OFRECEN
			ORDER BY COD_CATEGORIA, COD_SUBCATEGORIA;
			

	-- =============================================
	-- TERMINOS DE LAS COMIDAS
		OPEN CURSOR_TERMINOS FOR
			SELECT  DISTINCT TRIM(CATECOD) COD_CATEGORIA,
				TRIM(SUBCATECOD) COD_SUBCATEGORIA, 
				SUBSTR(TRIM(LINCODCATE),0,LENGTH(TRIM(LINCODCATE))-1) COD_TERMINO,
				TRIM(LINDESCATE) TERMINOS
			FROM INV0015
			WHERE CATEEMPCOD = '901.023.461-1'
				OR CATEEMPCOD = '901.023.461-2'
				-- ADICIONAR LAS DEMAS CODIGOS DE LOS RESTUARANTES QUE OFRECEN
			ORDER BY COD_CATEGORIA, COD_SUBCATEGORIA, COD_TERMINO;

	-- =============================================
	-- TERMINOS DE LAS COMIDAS
		OPEN CURSOR_COMIDA FOR
			SELECT DISTINCT TRIM(A.PRECIO) PRECIO, 
	            TRIM(A.COD_PRODUCTO) COD_PRODUCTO,
	            TRIM(B.PRODES) NOMBRE, 
	            TRIM(B.VENCATCOD) CATEGORIA,
	            TRIM(B.VENSCATCOD) SUB_CATEGORIA, 
	            NVL(B.VENLINCCOD, 'SIN_TERMINO') TERMINOS
	        FROM (	SELECT MAX(A.PROPRE) PRECIO,
		                A.PROCOD COD_PRODUCTO	                
		            FROM VEN00012 A
		            WHERE A.VENEMPC = '901.023.461-1'
		            	OR A.VENEMPC = '901.023.461-2'
		            ---- ADICIONAR LAS DEMAS CODIGOS DE LOS RESTUARANTES QUE OFRECEN
		            GROUP BY A.PROCOD) A
	        LEFT JOIN VEN0001 B
	            ON A.COD_PRODUCTO = B.PROCOD
	        ORDER BY CATEGORIA, SUB_CATEGORIA,TERMINOS;

	END SP_ACOMER_MENU;

-- =============================================
-- INSERTAR CABECERA DE LOS PEDIDOS
	PROCEDURE SP_ACOMER_PEDIDOS_CAB
	(
		IN_CODIGO_RESTAURANTE IN  GEN0006.EMPCOD%TYPE,	   -- RESTAURANTE AL CUAL SE LE HACE EL PEDIDO
		IN_CODIGO_DOCUMENTO_PEDIDO IN GEN0012.DOCCOD%TYPE, -- VDOCUMENTO DE PEDIDO PARA SABER EL NUMERO DE PEDIDO DEPENDIENDO EL RESTAURANTE 
		IN_CODIGO_MESERO IN SEG0001.USUID%TYPE,        	   -- CEDULA DEL MESERO QUE ESTA TOMANDO EL PEDIDO 
		IN_CODIGO_MESA_USADA IN INV00018.MESCOD%TYPE,	   -- CODIGO DE LA MESA
		OUT_NUMERO_PEDIDO OUT VEN0104.PEDNRO%TYPE		   -- CODIGO DEL PEDIDO
	)
	AS
		V_CODIGO_PAIS VEN0104.PEDPAIC%TYPE;  -- VARIABLE QUE CONTIENE EL CODIGO DEL PAIS 
		V_CODIGO_PEDIDO GEN0012.DOCNRO%TYPE; -- CODIGO CON EL CUAL QUEDA REGISTRADO LOS PEDIDOS DE UNA MESA
		V_FECHA_PEDIDO VEN0104.PEDFECH%TYPE; -- FEHCA QUE SE REALIZO EL PEDIDO
		V_USUARIO SEG0001.USUID%TYPE;		 -- IDENTIFCARDOR (USUARIO) DEL MESERO
		V_HORA_PEDIDO VEN0104.PEDHORA%TYPE;  -- HORA QUE SE TOMA EL PEDIDO 
		V_NUMERO_PEDIDO VEN0104.PEDNRO%TYPE; -- NUMERO DE PEDIDO

	BEGIN
	-- =============================================
	-- CONSULTA EL CODIGO DEL PAIS CON LA CEDULA DEL MESERO
		SELECT DISTINCT SEG0001.EMPPAIC 
		INTO V_CODIGO_PAIS
		FROM SEG0001 
		WHERE SEG0001.USUCED = IN_CODIGO_MESERO;

	-- =============================================
	-- CONSULTA EL NUMERO DE PEDIDO 
		SELECT TO_NUMBER(GEN0012.DOCNRO + 1)
		INTO V_CODIGO_PEDIDO
		FROM GEN0012
		WHERE GEN0012.DOCCOD = IN_CODIGO_DOCUMENTO_PEDIDO
			AND GEN0012.EMPPAIC = V_CODIGO_PAIS
			AND GEN0012.EMPCOD = IN_CODIGO_RESTAURANTE;	

	-- =============================================
	-- ACTUALIZO EL NUMERO DE DOCUMENTO
		UPDATE GEN0012
			SET  DOCNRO = V_CODIGO_PEDIDO
		WHERE GEN0012.DOCCOD = IN_CODIGO_DOCUMENTO_PEDIDO
			AND GEN0012.EMPPAIC = V_CODIGO_PAIS
			AND GEN0012.EMPCOD = IN_CODIGO_RESTAURANTE;	

	-- =============================================
	-- CONSULTA LA FECHA DEL SYSTEMA
		SELECT TO_DATE(SYSDATE, 'DD/MM/YYY')
		INTO V_FECHA_PEDIDO
		FROM DUAL;		

	-- =============================================
	-- CONSULTA EL USUARIO DEL MESERO
		SELECT DISTINCT SEG0001.USUID
		INTO V_USUARIO
		FROM SEG0001
		WHERE SEG0001.USUCED = '16743485'
	        AND ROWNUM = 1;

	-- =============================================
	-- CONSULTA LA HORA DE LA TOMA DEK PEDIDO 
		SELECT TO_CHAR(SYSDATE,'HH:MI:SS')
		INTO V_HORA_PEDIDO
		FROM DUAL;

	-- =============================================
	-- CONSULTA LA HORA DE LA TOMA DEK PEDIDO 
		SELECT NVL(MAX(PEDNRO),0) + 1
		INTO V_NUMERO_PEDIDO
		FROM VEN0104;

		OUT_NUMERO_PEDIDO := V_NUMERO_PEDIDO;

	-- =============================================
	-- INSERCION DE LOS DATOS DEL PEDIDO CABECERA
		INSERT INTO VEN0104(PEDPAIC, PEDEMPC, PEDCODDOC, PEDNUMDOC, 
			PEDFECH, PEDFECE, COTPAIC, COTEMPC, 
			PEDVENCOD, PEDFAC, PEDLC, PEDDEDT, 
			PEDFLE, PEDMODCOD, PEDORDCOM, PEDOTM, 
			PEDTDEOM, USUPAIC, USUEMPC, VENUSUARIO, 
			MESCOD, PEDHORA,PEDNRO)
		VALUES (V_CODIGO_PAIS, IN_CODIGO_RESTAURANTE, IN_CODIGO_DOCUMENTO_PEDIDO, V_CODIGO_PEDIDO,
			V_FECHA_PEDIDO, V_FECHA_PEDIDO, V_CODIGO_PAIS, IN_CODIGO_RESTAURANTE,
			IN_CODIGO_MESERO,'N','0','0',
			'0','PEDIDO','01','N',
			'0',V_CODIGO_PAIS,IN_CODIGO_RESTAURANTE,V_USUARIO,
			IN_CODIGO_MESA_USADA,V_HORA_PEDIDO, V_NUMERO_PEDIDO);
	END SP_ACOMER_PEDIDOS_CAB;

-- =============================================
-- INSERTAR DETALLE DE LOS PEDIDOS
	PROCEDURE SP_ACOMER_PEDIDOS_DET
	(
		IN_CODIGO_RESTAURANTE IN  GEN0006.EMPCOD%TYPE,	   -- RESTAURANTE AL CUAL SE LE HACE EL PEDIDO
		IN_CODIGO_DOCUMENTO_PEDIDO IN GEN0012.DOCCOD%TYPE, -- VDOCUMENTO DE PEDIDO PARA SABER EL NUMERO DE PEDIDO DEPENDIENDO EL RESTAURANTE 
		IN_CODIGO_PEDIDO IN VEN0004.PEDNRO%TYPE,		   -- NUMERO DE PEDIDO
		IN_CODIGO_ITME IN VEN0001.PROCOD%TYPE,			   -- CODIGO DEL ALIMENTO O ITEM QUE SE ESTA PIDIENDO 
		IN_CODIGO_TERMINO IN VEN0004.PEDBODL%TYPE,		   -- CODIGO DEL TERMINO DE LA COMIDAS
		IN_PUESTO_MESA IN VEN0004.CCOCOD%TYPE,			   -- PUESTO DE MESA DEL CUAL SE ESTA SOLICITANDO
		IN_CANTIDAD IN VEN0004.PEDUNI%TYPE,				   -- CANTIDAD DEL PRODUCTO
		IN_CODIGO_MESERO IN SEG0001.USUID%TYPE        	   -- CEDULA DEL MESERO QUE ESTA TOMANDO EL PEDIDO 
	)
	AS
		V_CODIGO_PAIS VEN0104.PEDPAIC%TYPE;  			-- VARIABLE QUE CONTIENE EL CODIGO DEL PAIS 
		V_CONTADOR_ITEMS_PEDIDO VEN0004.PEDLIN%TYPE;    -- CONTADOS DE LOS ITEM A PEDIR 
		V_PRECIO_ITEM VEN00012.PROPRE%TYPE;				-- PRECIO DEL ITEM SELECCIONADO
		V_VALOR_IVA  CNT0014.DEDPOR%TYPE;				-- VALOR DEL IVA PARA EL PRODUCTO
		V_IVA_ITEM VEN0004.PEDVALIVA%TYPE;				-- VALOR DEL PRODUCTO CON IVA
		V_TOTAL_ITEM VEN0004.PEDVALTUN%TYPE;			-- VALOR TOTAL CON LA CANTIDAD DEL ITEM 
		V_ALIAS_ITEM VEN0001.PROABR%TYPE;				-- ALIAS DEL PRODUCTO 
		V_RFPORDTO VEN0001.RFPORDTO%TYPE;				-- RFPORDTO 
		V_VALDESC VEN0004.peddcval%TYPE;				-- peddcval

	BEGIN
	-- =============================================
	-- CONSULTA EL CODIGO DEL PAIS CON LA CEDULA DEL MESERO
		SELECT DISTINCT SEG0001.EMPPAIC 
		INTO V_CODIGO_PAIS
		FROM SEG0001 
		WHERE SEG0001.USUCED = IN_CODIGO_MESERO;

	-- =============================================
	-- CONSULTA EL CODIGO DEL PAIS CON LA CEDULA DEL MESERO
		SELECT MAX(VEN0004.PEDLIN) + 1
		INTO V_CONTADOR_ITEMS_PEDIDO
		FROM VEN0004 
		WHERE VEN0004.PEDNRO = IN_CODIGO_PEDIDO;

		IF(V_CONTADOR_ITEMS_PEDIDO IS NULL) THEN
			BEGIN
				V_CONTADOR_ITEMS_PEDIDO := 1;
			END;
		END IF;

	-- =============================================
	-- CONSULTA EL PRECIO DEL ITEM SELECCIONADO
		SELECT VEN00012.PROPRE
		INTO V_PRECIO_ITEM
		FROM VEN00012
		WHERE VENEMPC = IN_CODIGO_RESTAURANTE
		    AND LIPCOD = '01'
		    AND PROCOD = IN_CODIGO_ITME;

	-- =============================================
	-- CONSULTA EL IVA PARA EL PRODUCTO
		SELECT CNT0014.DEDPOR
		INTO V_VALOR_IVA
		FROM VEN0001 
		LEFT JOIN CNT0014  
		    ON VEN0001.FDEDCOD = CNT0014.DEDCOD 
		    AND VEN0001.FDEDSC = CNT0014.DEDSUBCOD
		    AND VEN0001.FDEDANO = CNT0014.DEDANO 
		WHERE VEN0001.VENEMPPAI = V_CODIGO_PAIS 
		    AND VEN0001.VENEMPC = IN_CODIGO_RESTAURANTE 
		    AND VEN0001.PROCOD = IN_CODIGO_ITME;

	-- =============================================
	-- VALOR DEL PRODUCTO CON EL IVA
		V_IVA_ITEM := (((V_VALOR_IVA/100)*(V_PRECIO_ITEM)) + V_PRECIO_ITEM);

	-- =============================================
	-- SE CALCULA EL PRECIO TOTAL CONLA CANTIDAD PEDIDA DEL ITEM
		V_TOTAL_ITEM := IN_CANTIDAD * V_IVA_ITEM;

	-- =============================================
	-- CONSULTA EL ALIAS DEL ITEM O PRODUCTO
		SELECT PROABR, RFPORDTO
		INTO V_ALIAS_ITEM, V_RFPORDTO
		FROM VEN0001
		WHERE VEN0001.VENEMPPAI = V_CODIGO_PAIS
			AND VEN0001.VENEMPC = IN_CODIGO_RESTAURANTE
			AND VEN0001.PROCOD = IN_CODIGO_ITME;

		IF(V_RFPORDTO > 0) THEN
			BEGIN
				V_VALDESC := (V_PRECIO_ITEM * IN_CANTIDAD * V_RFPORDTO) / 100;
			END;
		ELSE
			BEGIN
				V_RFPORDTO := 0;
				V_VALDESC := 0;
			END;
		END IF;

	--- =============================================
	-- INSERTAR DETALLE DE LOS PEDIDOS
		INSERT INTO VEN0004(PEDPAIC, PEDEMPC, PEDCODDOC,PEDNRO,
			PEDLIN, PEDPROCOD, PEPC, PEC,
			CCOCOD, PEDUNI, PEDVAL, PEDVALCPI, 
			PEDPORIVA, PEDVALIVA, PEDVALTUN, PEDSUCDET,
			PEDALIAS, PEDPORDC, PEDDCVAL, PEDSAL,
			PEDBODL, PEDCHECK)
		VALUES(V_CODIGO_PAIS, IN_CODIGO_RESTAURANTE, IN_CODIGO_DOCUMENTO_PEDIDO, IN_CODIGO_PEDIDO,
			V_CONTADOR_ITEMS_PEDIDO, IN_CODIGO_ITME, V_CODIGO_PAIS, IN_CODIGO_RESTAURANTE,
			IN_PUESTO_MESA, IN_CANTIDAD, V_PRECIO_ITEM, 0,
			V_VALOR_IVA, V_IVA_ITEM, V_TOTAL_ITEM, '01',
			V_ALIAS_ITEM, V_RFPORDTO, V_VALDESC, 'N',
			IN_CODIGO_TERMINO, IN_CANTIDAD);
	END SP_ACOMER_PEDIDOS_DET;

-- =============================================
-- PROCEDIMIENTOS PARA LOS PEDIDOS
	PROCEDURE SP_ACOMER_PEDIDOS
	(
		IN_PUESTOS_ARRAY IN OUT TYPE_PEDIDOS_ARRAY, 	 -- LOS PUESTOS DE DONDE FUERON SOLICITADOS LOS PEDIDOS
		IN_PRODUCTOS_ARRAY IN  OUT TYPE_PEDIDOS_ARRAY,   -- LOS CODIGOS DE LOS PRODUCTOS QUE SE ESTA PIDIENDO 
		IN_CANTIDAD_ARRAR IN OUT TYPE_PEDIDOS_ARRAY,	 -- LA CANTIDAD PEDIDA POR PRODDUCTO
		IN_TERMINO_ARRAY IN OUT TYPE_PEDIDOS_ARRAY,		 -- TERMINO DE LA COMIDA SI HA DE TENERLA 
		IN_CODIGO_MESERO IN SEG0001.USUCED%TYPE,		 -- CODIGO DEL MESERO 
		IN_CODIGO_MESA IN INV00018.MESCOD%TYPE      	 -- CODIGO DE LA MESA DONDE SE ESTA REALIZANDO DEL PEDIDO 	
	)
	AS
		V_CODIGO_RESTAURANTE VEN0001.VENEMPC%TYPE;  -- OBTENER Y PASAR CODIGOS DE LOS RESTAURANTES RESULTANTES DE LOS PRODUCTOS
		V_CODIGO_PEDIDOS_OUT  VEN0104.PEDNRO%TYPE; 	-- VARIABLE DE SALIDA DEL PROCEDIMIENTO SP_ACOMER_PEDIDOS_CAB
		V_CODIGO_PEDIDOS TYPE_PEDIDOS_ARRAY; 		-- ALMACENA LOS CODIGOS DE LOS PEDIDOS CREADOS 
		V_CONTADOR NUMBER := 1; 		   			-- CONTADOR PARA TENER LA CANTIDAD DE PEDIDOS
		V_VALIDACION NUMBER;						-- VALIDACION DE DATOS
		V_PROB VARCHAR2(200);
	BEGIN
	-- =============================================
	-- VALIDA QUE LA MESA INSERTADA EXISTE
		SELECT COUNT(*)
		INTO V_VALIDACION
		FROM INV00018
		WHERE MESCOD = IN_CODIGO_MESA;

		IF(V_VALIDACION = 0) THEN
			BEGIN
				RAISE_APPLICATION_ERROR(-20001, 'LA MESA INGRESADA "'||IN_CODIGO_MESA||'" NO ES VALIDA.');
			END;
		END IF;

	-- =============================================
	-- VALIDA QUE LOS PUESTOS SI EXISTEN 
		FOR I IN IN_PUESTOS_ARRAY.FIRST..IN_PUESTOS_ARRAY.LAST
		LOOP
			SELECT COUNT(*)
			INTO V_VALIDACION
			FROM GEN0009
			WHERE CCOCOD = CAST(IN_PUESTOS_ARRAY(I) AS CHAR(3));
			
			IF(V_VALIDACION = 0) THEN
				BEGIN
					RAISE_APPLICATION_ERROR(-20001, 'EL PUESTO INGRESADO "'||IN_PUESTOS_ARRAY(I)||'" NO ES VALIDO.');
				END;
			END IF;
		END LOOP;

	-- =============================================
	-- VALIDA QUE LOS PUESTOS SI EXISTEN 
		FOR I IN IN_PRODUCTOS_ARRAY.FIRST..IN_PRODUCTOS_ARRAY.LAST
		LOOP
			SELECT COUNT(*)
			INTO V_VALIDACION
			FROM VEN0001
			WHERE PROCOD = CAST(IN_PRODUCTOS_ARRAY(I) AS CHAR(20));
			
			IF(V_VALIDACION = 0) THEN
				BEGIN
					RAISE_APPLICATION_ERROR(-20001, 'EL ITEM INGRESADO "'||IN_PRODUCTOS_ARRAY(I)||'" NO ES VALIDO.');
				END;
			END IF;
		END LOOP;

	-- =============================================
	-- CONSUTO EL CODIGO DE LOS RESTAURANTE DONDE PERTENECE EL PRODUCTO
		FOR I IN IN_PRODUCTOS_ARRAY.FIRST..IN_PRODUCTOS_ARRAY.LAST
		LOOP
			-- CONSULTO EL CODIGO DEL RESTAURANTE AL Q PERTENECE EL PRODUCTO
			SELECT VENEMPC
			INTO V_CODIGO_RESTAURANTE
			FROM VEN0001
			WHERE PROCOD = CAST(IN_PRODUCTOS_ARRAY(I) AS CHAR(20));

			-- SE INSERTA EN LA TABLA TEMPORAL LOS CODIGOS DE LOS RESTAURANTES
			INSERT INTO TT_COD_RES (COD_RES)
			VALUES (V_CODIGO_RESTAURANTE);
			
		END LOOP;

	-- =============================================
	-- INSERTO LAS CABECERAS DE LOS PEDIDOS
		DECLARE
			CURSOR CURSOR_PEDIDOS IS
				SELECT DISTINCT COD_RES
				FROM TT_COD_RES;
		BEGIN
			OPEN CURSOR_PEDIDOS;
			LOOP	
				-- LEEMOS EL CURSOR 
				FETCH CURSOR_PEDIDOS INTO V_CODIGO_RESTAURANTE;
				--SALE DEL LOOP SI NO ENCUENTRA NADA EN EL CURSOR
				EXIT WHEN CURSOR_PEDIDOS%NOTFOUND;
				-- CREAMOS LA CABECERA DEL PEDIDO PARA CADA RESTAURANTE
				SP_ACOMER_PEDIDOS_CAB(V_CODIGO_RESTAURANTE, 'PD', IN_CODIGO_MESERO, IN_CODIGO_MESA, V_CODIGO_PEDIDOS_OUT);
				-- INSERTAMOS LOS CODIGOS DE PEDIDO GENERADOS EN LA CABECERA
				UPDATE TT_COD_RES
				SET COD_PED = V_CODIGO_PEDIDOS_OUT
				WHERE COD_RES = V_CODIGO_RESTAURANTE;
			END LOOP;
			CLOSE CURSOR_PEDIDOS;
		END;

	-- =============================================
	-- INSERTO EL DETALLE DE LOS PEDIDOS
		DECLARE
			CR_COD_RES TT_COD_RES.COD_RES%TYPE;  -- VARIABLE QUE TENDRA LOS VALORES LEIDOS DEL CURSOR
			CR_COD_PED TT_COD_RES.COD_PED%TYPE;	 -- VARIABLE QUE TENDRA LOS VALORES LEIDOS DEL CURSOR
			CR_VALIDA VEN0001.VENEMPC%TYPE;  	 -- COMPARAR VARIABLES
			CURSOR CURSOR_PEDIDOS_DET IS
				SELECT DISTINCT *
				FROM TT_COD_RES;
		BEGIN
			OPEN CURSOR_PEDIDOS_DET;
			LOOP
				-- LEEMOS EL CURSOR 
				FETCH CURSOR_PEDIDOS_DET INTO CR_COD_RES, CR_COD_PED;
				--SALE DEL LOOP SI NO ENCUENTRA NADA EN EL CURSOR
				EXIT WHEN CURSOR_PEDIDOS_DET%NOTFOUND;
				-- RECORREMOS LOS ITEMS E INSERTAMOS EN EL DETALLE DEL PEDIDO
				FOR I IN IN_PRODUCTOS_ARRAY.FIRST..IN_PRODUCTOS_ARRAY.LAST
				LOOP
					-- CONSULTAMOS EL CODIGO DEL RESTAURANTE AL QUE EL PRODUCTO O ITEM PERTENECE 
					SELECT VENEMPC
					INTO CR_VALIDA
					FROM VEN0001
					WHERE PROCOD = CAST(IN_PRODUCTOS_ARRAY(I) AS CHAR(20));
					-- SI LOS CODIGOS DE LOS RESTAURANTES COINCIDEN SE GUARDA EL DETALLE DEL PEDIDO
					IF(CR_VALIDA = CR_COD_RES) THEN
						BEGIN
							-- INSERTA EL DETALLE DEL PEDIDO 
							SP_ACOMER_PEDIDOS_DET(CR_COD_RES, 'PD', CR_COD_PED, IN_PRODUCTOS_ARRAY(I), IN_TERMINO_ARRAY(I),
							IN_PUESTOS_ARRAY(I), IN_CANTIDAD_ARRAR(I), IN_CODIGO_MESERO);
						END;
					END IF;
					
				END LOOP;
			END LOOP;
			CLOSE CURSOR_PEDIDOS_DET;
		END;

	-- MESUSUREQ  RESTAURANTE SMILLE CITY	901.023.461-1
	-- MESUSUREQ1 RESTAURANTE 				901.023.461-2
	-- MESUSUREQ2 RESTAURANTE
	-- =============================================
	-- ACTUALIZA LA MESA A OCUPADA UNA VEZ SE TOMA EL PEDIDO
		DECLARE	
			-- DATOS PARA EL MANEJO DEL CURSOR
			CR_COD_RES TT_COD_RES.COD_RES%TYPE;  -- VARIABLE QUE TENDRA LOS VALORES LEIDOS DEL CURSOR
			CR_COD_PED TT_COD_RES.COD_PED%TYPE;	 -- VARIABLE QUE TENDRA LOS VALORES LEIDOS DEL CURSOR
			CURSOR CURSOR_PEDIDOS_DET IS
				SELECT DISTINCT *
				FROM TT_COD_RES;
			-- DATOS PARA LA CONSULTA DEL NUMDOC
			V_NUMDOC VEN0104.PEDNUMDOC%TYPE; -- ALAMACENAR EL NUMERO DE DOCUMENTO DEL PEDIDO PARA LA MESA
		BEGIN
			OPEN CURSOR_PEDIDOS_DET;
			LOOP
				-- LEEMOS EL CURSOR 
				FETCH CURSOR_PEDIDOS_DET INTO CR_COD_RES, CR_COD_PED;
				--SALE DEL LOOP SI NO ENCUENTRA NADA EN EL CURSOR
				EXIT WHEN CURSOR_PEDIDOS_DET%NOTFOUND;

				-- =============================================
				-- CONSULTO EL NUMERO DEL DOCUMENTO ASIGANADO AL PEDIDO DE LA MESA
				SELECT PEDNUMDOC
				INTO V_NUMDOC
				FROM VEN0104
				WHERE PEDEMPC = CR_COD_RES
					AND PEDNRO = CR_COD_PED
					AND MESCOD = IN_CODIGO_MESA;

				-- COMPARAMOS LOS CODIGOS DE LOS RESTAURANTES Y ACTUALIZAMOS LOS NUMEROS DE LOS PEDIDOS EN LAS MESAS 
				CASE CR_COD_RES
					WHEN '901.023.461-1' THEN
						BEGIN
							UPDATE INV00018
							SET MESESTADO = 'Ocupado',
							    MESUSUREQ = IN_CODIGO_MESERO,
							    MESDOCREQ = 'PD',
							    MESNUMREQ = V_NUMDOC,
							    MESHORAPED = TO_CHAR(SYSDATE,'HH24:MI:SS')
							WHERE MESCOD = IN_CODIGO_MESA;
						END;

					WHEN '901.023.461-2' THEN
						BEGIN
							UPDATE INV00018
							SET MESESTADO = 'Ocupado',
							    MESUSUREQ = IN_CODIGO_MESERO,
							    MESDOCREQ = 'PD',
							    MESNUMREQ2 = V_NUMDOC,
							    MESHORAPED = TO_CHAR(SYSDATE,'HH24:MI:SS')
							WHERE MESCOD = IN_CODIGO_MESA;
						END;
						
					ELSE 
						BEGIN
							UPDATE INV00018
							SET MESESTADO = 'Ocupado',
							    MESUSUREQ = IN_CODIGO_MESERO,
							    MESDOCREQ = 'PD',
							    MESNUMREQ3 = V_NUMDOC,
							    MESHORAPED = TO_CHAR(SYSDATE,'HH24:MI:SS')
							WHERE MESCOD = IN_CODIGO_MESA;
						END;
				END CASE;
				
			END LOOP;
			CLOSE CURSOR_PEDIDOS_DET;
		END;	
	END SP_ACOMER_PEDIDOS;

-- =============================================
-- PROCEDIMIENTOS PARA ACTUALIZAR LOS PEDIDOS
	PROCEDURE SP_ACOMER_PEDIDOS_ACT	
	(
		IN_CODIGO_PRODUCTO IN VEN0001.PROCOD%TYPE, -- CODIGO DEL ITEM QUE SE ADICIONARA
		IN_CODIGO_PEDIDO IN VEN0104.PEDNRO%TYPE,   -- CODIGO DEL PEDIDO QUE YA TIENE EN LA MESA
		IN_CODIGO_PUESTO IN VEN0004.CCOCOD%TYPE,   -- PUESTO DESDE DONDE SE ESTA PIDIENDO
		IN_CANTIDAD IN VEN0004.PEDUNI%TYPE		   -- CANTIDD DEL PRODUCTO QUE SE ESTA PIDIENDO 
	)
	AS
		V_CANTIDAD VEN0004.PEDUNI%TYPE;   			-- CANTIDAD TOTAL CON LO PEDIDO Y LO QUE SE VA A PEDIR
		V_VALOR_ITEM_IVA VEN0004.PEDVALIVA%TYPE;	-- VALOR DEL ITEM CON IVA
		V_CODIGO_RESTAURANTE VEN0004.PEDEMPC%TYPE;	-- CODIGO DEL RESTAURANTE
		V_CODIGO_PAIS VEN0004.PEDPAIC%TYPE;			-- CODIGO DEL PAIS 
		V_VALDESC VEN0004.peddcval%TYPE;			-- peddcval
		V_RFPORDTO VEN0001.RFPORDTO%TYPE;			-- RFPORDTO 
		V_PRECIO_ITEM VEN0004.PEDVALIVA%TYPE;		-- VALOR DEL ITEM CON IVA
		V_PEDIDOS_FALTANTES VEN0004.PEDCHECK%TYPE;	-- TOTAL DE PEDIDOS ENTREGADOS 
	BEGIN
	-- CONSULTA LA CANTDAD ACTUAL QUE HAY PEDIDO DEL 
		SELECT PEDUNI + IN_CANTIDAD
		INTO V_CANTIDAD
		FROM VEN0004
		WHERE CCOCOD = IN_CODIGO_PUESTO
			AND PEDNRO = IN_CODIGO_PEDIDO
			AND PEDPROCOD = IN_CODIGO_PRODUCTO;

		-- CONSULTAMOS EL VALOR DEL ITEM CON IVA INCLUIDO
		SELECT PEDVALIVA * V_CANTIDAD, PEDVALIVA
		INTO V_VALOR_ITEM_IVA, V_PRECIO_ITEM
		FROM VEN0004
		WHERE CCOCOD = IN_CODIGO_PUESTO
			AND PEDNRO = IN_CODIGO_PEDIDO
			AND PEDPROCOD = IN_CODIGO_PRODUCTO;

		--CONSULTA EL CODIGO DEL RESTAURANTE
		SELECT PEDEMPC, PEDPAIC
		INTO V_CODIGO_RESTAURANTE, V_CODIGO_PAIS 
		FROM VEN0004
		WHERE CCOCOD = IN_CODIGO_PUESTO
			AND PEDNRO = IN_CODIGO_PEDIDO
			AND PEDPROCOD = IN_CODIGO_PRODUCTO;

		--
		SELECT RFPORDTO
		INTO V_RFPORDTO
		FROM VEN0001
		WHERE VEN0001.VENEMPPAI = V_CODIGO_PAIS
			AND VEN0001.VENEMPC = V_CODIGO_RESTAURANTE
			AND VEN0001.PROCOD = IN_CODIGO_PRODUCTO;

		--
		IF(V_RFPORDTO > 0) THEN
			BEGIN
				V_VALDESC := (V_PRECIO_ITEM * V_CANTIDAD * V_RFPORDTO) / 100;
			END;
		ELSE
			BEGIN
				V_RFPORDTO := 0;
				V_VALDESC := 0;
			END;
		END IF;

	-- CONSULTO LOS PEDIDOS YA ENTREGADOS 
	SELECT PEDCHECK + IN_CANTIDAD
	INTO V_PEDIDOS_FALTANTES
	FROM VEN0004
	WHERE CCOCOD = IN_CODIGO_PUESTO
		AND PEDNRO = IN_CODIGO_PEDIDO
		AND PEDPROCOD = IN_CODIGO_PRODUCTO;

	-- ==============================================
	-- ACTUALIZA EL DETALLE DEL PEDIDO 
		UPDATE VEN0004
		SET PEDUNI = V_CANTIDAD,
			PEDVALTUN = V_VALOR_ITEM_IVA,
			PEDPORDC = V_RFPORDTO,
			PEDDCVAL = V_VALDESC,
			PEDSAL = 'N',
			PEDCHECK = V_PEDIDOS_FALTANTES
		WHERE PEDPROCOD = IN_CODIGO_PRODUCTO
			AND PEDNRO = IN_CODIGO_PEDIDO
			AND CCOCOD = IN_CODIGO_PUESTO;
	END SP_ACOMER_PEDIDOS_ACT;

-- =============================================
-- PROCEDIMIENTOS PARA ADICIONAR LOS PEDIDOS
	PROCEDURE SP_ACOMER_PEDIDOS_ADD
	(	
		IN_PUESTOS_ARRAY IN OUT TYPE_PEDIDOS_ARRAY, 	 -- LOS PUESTOS DE DONDE FUERON SOLICITADOS LOS PEDIDOS
		IN_PRODUCTOS_ARRAY IN  OUT TYPE_PEDIDOS_ARRAY,   -- LOS CODIGOS DE LOS PRODUCTOS QUE SE ESTA PIDIENDO 
		IN_CANTIDAD_ARRAR IN OUT TYPE_PEDIDOS_ARRAY,	 -- LA CANTIDAD PEDIDA POR PRODDUCTO
		IN_TERMINO_ARRAY IN OUT TYPE_PEDIDOS_ARRAY,		 -- TERMINO DE LA COMIDA SI HA DE TENERLA 
		IN_CODIGO_MESERO IN SEG0001.USUCED%TYPE,		 -- CODIGO DEL MESERO 
		IN_CODIGO_MESA IN INV00018.MESCOD%TYPE      	 -- CODIGO DE LA MESA DONDE SE ESTA REALIZANDO DEL PEDIDO 	
	)
	AS
		V_CODIGO_RESTAURANTE VEN0001.VENEMPC%TYPE;  -- OBTENER Y PASAR CODIGOS DE LOS RESTAURANTES RESULTANTES DE LOS PRODUCTOS
		V_CODIGO_PEDIDOS_OUT  VEN0104.PEDNRO%TYPE; 	-- VARIABLE DE SALIDA DEL PROCEDIMIENTO SP_ACOMER_PEDIDOS_CAB	
		V_CONTADOR NUMBER := 0; 		   			-- CONTADOR PARA TENER LA CANTIDAD DE PEDIDOS
		V_VALIDACION NUMBER;						-- VALIDACION DE DATOS
		ARRAY_PEDIDOS_NEW TYPE_PEDIDOS_ARRAY; -- POSICION DE LOS ITEM DE RESTAURANTES QUE NO TIENEN PEDIDOS	
		V_BOOLEAN BOOLEAN := FALSE; 
	BEGIN
	-- =============================================
	-- VALIDA QUE LA MESA INSERTADA EXISTE
		SELECT COUNT(*)
		INTO V_VALIDACION
		FROM INV00018
		WHERE MESCOD = IN_CODIGO_MESA;

		IF(V_VALIDACION = 0) THEN
			BEGIN
				RAISE_APPLICATION_ERROR(-20001, 'LA MESA INGRESADA "'||IN_CODIGO_MESA||'" NO ES VALIDA.');
			END;
		END IF;

	-- =============================================
	-- VALIDA QUE LOS PUESTOS SI EXISTEN 
		FOR I IN IN_PUESTOS_ARRAY.FIRST..IN_PUESTOS_ARRAY.LAST
		LOOP
			SELECT COUNT(*)
			INTO V_VALIDACION
			FROM GEN0009
			WHERE CCOCOD = CAST(IN_PUESTOS_ARRAY(I) AS CHAR(3));
			
			IF(V_VALIDACION = 0) THEN
				BEGIN
					RAISE_APPLICATION_ERROR(-20001, 'EL PUESTO INGRESADO "'||IN_PUESTOS_ARRAY(I)||'" NO ES VALIDO.');
				END;
			END IF;
		END LOOP;

	-- =============================================
	-- VALIDA QUE LOS PRODUCTOS SI EXISTEN 
		FOR I IN IN_PRODUCTOS_ARRAY.FIRST..IN_PRODUCTOS_ARRAY.LAST
		LOOP
			SELECT COUNT(*)
			INTO V_VALIDACION
			FROM VEN0001
			WHERE PROCOD = CAST(IN_PRODUCTOS_ARRAY(I) AS CHAR(20));
			
			IF(V_VALIDACION = 0) THEN
				BEGIN
					RAISE_APPLICATION_ERROR(-20001, 'EL ITEM INGRESADO "'||IN_PRODUCTOS_ARRAY(I)||'" NO ES VALIDO.');
				END;
			END IF;
		END LOOP;

	-- =============================================
	-- COMPRAR LOS PEDIDOS DE LOS RESTAURANTES DE LA MESAS	
		DECLARE
			V_NUMDOC1 INV00018.MESNUMREQ%TYPE;
			V_NUMDOC2 INV00018.MESNUMREQ2%TYPE;
			V_NUMDOC3 INV00018.MESNUMREQ3%TYPE;
			V_ESTADO VARCHAR2(1);
			V_CONTADOR NUMBER := 1;
		BEGIN
			-- SE CONSULTA LOS NUMEROS DE PEDIDOS QUE TIENE LA MESA ACTUALMENTE
			SELECT MESNUMREQ,MESNUMREQ2,
			    MESNUMREQ3
			INTO V_NUMDOC1, V_NUMDOC2,
				V_NUMDOC3
			FROM INV00018
			WHERE MESCOD = IN_CODIGO_MESA;

			FOR I IN IN_PRODUCTOS_ARRAY.FIRST..IN_PRODUCTOS_ARRAY.LAST
			LOOP
				-- CONSULTA EL CODIGO DEL RESTAURANTE AL QUE PERTENECE EL PRODUCTO 
				SELECT VENEMPC
				INTO V_CODIGO_RESTAURANTE
				FROM VEN0001
				WHERE PROCOD = CAST(IN_PRODUCTOS_ARRAY(I) AS CHAR(20));

				-- COMPARA QUE EL RESTAURANTE AL QUE PERTENECE EL ELEMENTO PEDIDO, TENGA PEDIDO EN LA MESA
				BEGIN
					SELECT DISTINCT '1' ESTADO
					INTO V_ESTADO
				    FROM DUAL
				    WHERE V_CODIGO_RESTAURANTE IN (SELECT PEDEMPC
				                                   FROM VEN0104 
				                                   WHERE PEDNUMDOC IN (V_NUMDOC1,V_NUMDOC2,V_NUMDOC3)
				                                        AND MESCOD = IN_CODIGO_MESA);
				EXCEPTION
					WHEN NO_DATA_FOUND THEN
						V_ESTADO := '0';
				END;
				-- SI YA HAY UN PEDIDO A ESE RESTAURANTE SE AGREGA EL ITEM A ESE PEDIDO 
				CASE V_ESTADO
					WHEN '1' THEN 	
						DECLARE
							V_PEDNRO VEN0104.PEDNRO%TYPE; -- ALMACENARA EL CODIGO DEL PEDIDO	
							V_REPETIDO NUMBER;			  -- VERIFICAR QUE 	
						BEGIN
							-- CONSULTO EL NUMERO DEL PEDIDO QUE TIENE ESA MESA EN EL RESTAURANTE 
							SELECT PEDNRO
							INTO V_PEDNRO
							FROM VEN0104
							WHERE PEDEMPC = V_CODIGO_RESTAURANTE 
							    AND PEDNUMDOC IN (V_NUMDOC1,V_NUMDOC2,V_NUMDOC3);

							-- CONSULTO SI EL ITEM YA HA SIDO PEDIDO O ES PRIMERA VEZ EN LA MESA Y EL PUESTO
							SELECT COUNT(*)
							INTO V_REPETIDO
							FROM VEN0004
							WHERE PEDPROCOD = CAST(IN_PRODUCTOS_ARRAY(I) AS CHAR(20))
	            				AND PEDNRO = V_PEDNRO
	            				AND CCOCOD = CAST(IN_PUESTOS_ARRAY(I) AS CHAR(20));

	            			--RAISE_APPLICATION_ERROR(-20001, 'CANTIDAD: '||TO_CHAR(V_REPETIDO));
	            			-- SI ESTA REPETIDO SE ACTUALIZA , SI NO SE AGREGA AL PEDIDO EL NUEVO ITEM
	            			IF(V_REPETIDO = 1) THEN
	            				BEGIN
	            					SP_ACOMER_PEDIDOS_ACT(
	            						IN_PRODUCTOS_ARRAY(I),
	            						V_PEDNRO, 
	            						IN_PUESTOS_ARRAY(I),
	            						IN_CANTIDAD_ARRAR(I));
	            				END;
	            			ELSE 
	            				BEGIN
	            					SP_ACOMER_PEDIDOS_DET(
	            						V_CODIGO_RESTAURANTE,
		            					'PD',
		            					V_PEDNRO,
		            					IN_PRODUCTOS_ARRAY(I),
		            					IN_TERMINO_ARRAY(I),
		            					IN_PUESTOS_ARRAY(I),
		            					IN_CANTIDAD_ARRAR(I),
		            					IN_CODIGO_MESERO);
	            				END;
	            			END IF;
						END;

					ELSE
						BEGIN
							V_BOOLEAN := TRUE;
							V_CONTADOR := V_CONTADOR + 1;
							ARRAY_PEDIDOS_NEW(V_CONTADOR) := I;							
						END;
				END CASE;
			END LOOP;

			-- SE AGREGAN LAS NUEVAS CABECERAS DE NO EXISTIR UN PEDIDO EN EL RESTAURANTE
			IF(V_BOOLEAN) THEN
				DECLARE
					ARRAY_PUESTOS TYPE_PEDIDOS_ARRAY;
					ARRAY_PRODUCTOS TYPE_PEDIDOS_ARRAY;
					ARRAY_CANTIDAD TYPE_PEDIDOS_ARRAY;
					ARRAY_TERMINO TYPE_PEDIDOS_ARRAY;
				BEGIN
					-- SE ASIGNAN LOS PEDIDOS QUE NO TIENE UNA CABECERA EN PEDIDO 
					FOR I IN ARRAY_PEDIDOS_NEW.FIRST..ARRAY_PEDIDOS_NEW.LAST
					LOOP
						ARRAY_PUESTOS(I) := IN_PUESTOS_ARRAY(ARRAY_PEDIDOS_NEW(I));
						ARRAY_PRODUCTOS(I) := IN_PRODUCTOS_ARRAY(ARRAY_PEDIDOS_NEW(I));
						ARRAY_CANTIDAD(I) := IN_CANTIDAD_ARRAR(ARRAY_PEDIDOS_NEW(I));
						ARRAY_TERMINO(I) := IN_TERMINO_ARRAY(ARRAY_PEDIDOS_NEW(I));
					END LOOP;

					--SE EJECUTA EL PROCEDIMIENTO DESDE CERO
					SP_ACOMER_PEDIDOS(ARRAY_PUESTOS,ARRAY_PRODUCTOS,ARRAY_CANTIDAD,ARRAY_TERMINO,IN_CODIGO_MESERO,IN_CODIGO_MESA);

				END;
			END IF;
		END;

		-- ACTUALIZA LA HORA DE ATENCION
		UPDATE INV00018
		SET MESHORAPED = TO_CHAR(SYSDATE,'HH24:MI:SS')
		WHERE MESCOD = IN_CODIGO_MESA;
	END SP_ACOMER_PEDIDOS_ADD;

-- =============================================
-- PROCEDIMIENTO PARA CANCELAR PEDIDOS
	PROCEDURE SP_ACOMER_PEDIDOS_CANCEL	
	(
		IN_TIPO_CANCELAR IN NUMBER,			 		  -- MODO QUE SE CANCELA EL PEIDO
		IN_CODIGO_MESA IN INV00018.MESCOD%TYPE, 	  -- CODIGO DE LA MESA DONDE SE VA A CANCELAR EL PEDIDO
		IN_PLATOS_CANCELAR IN OUT PKG_ACOMER_RESTAURANTES.TYPE_PEDIDOS_ARRAY, -- CODIGO DE LOS PLATOS QUE SE CANCELAN
		IN_CANTIDAD IN OUT PKG_ACOMER_RESTAURANTES.TYPE_PEDIDOS_ARRAY,        -- CANTIDAD POR PLATO QUE SE CANCELAN 
		IN_PUESTO IN OUT PKG_ACOMER_RESTAURANTES.TYPE_PEDIDOS_ARRAY 		  -- PUESTO DONDE CANCELAN EL PEDIDO
	)
	AS
		V_PEDIDO1 INV00018.MESNUMREQ%TYPE;   	-- CODIGO DE LOS PEDISO QUE HAY SOBRE LA MESA
		V_PEDIDO2 INV00018.MESNUMREQ2%TYPE;  	-- CODIGO DE LOS PEDISO QUE HAY SOBRE LA MESA
		V_PEDIDO3 INV00018.MESNUMREQ3%TYPE;  	-- CODIGO DE LOS PEDISO QUE HAY SOBRE LA MESA
		V_CONTADOR NUMBER;
		V_NUM_PEDIDO VEN0004.PEDNRO%TYPE;	 	-- NUMERO DEL PEDIDO AL QUE PERTENCE EL PLATO A CANCELAR
		V_CANT_PEDIDO NUMBER;				 	-- CANTIDAD DE LO QUE YA SE HABIA PEDIDO
		V_CANT_FALTAN NUMBER;				 	-- CANTIDAD DE PLATOS QUE FALTA POR ENTREGAR 
		V_CODIGO_EMPRESA VEN0004.PEDEMPC%TYPE;	-- CODIGO DE LA MESA AL QUE PERTENCE EL NUMERO DE PEDIDO 
		V_CANTIDAD VEN0004.PEDUNI%TYPE;   			-- CANTIDAD TOTAL DE LO PEDIDO
		V_VALOR_ITEM_IVA VEN0004.PEDVALIVA%TYPE;	-- VALOR DEL ITEM CON IVA
		V_PRECIO_ITEM VEN0004.PEDVALIVA%TYPE;		-- VALOR DEL ITEM CON IVA
		V_RFPORDTO VEN0001.RFPORDTO%TYPE;			-- RFPORDTO 
		V_VALDESC VEN0004.peddcval%TYPE;			-- peddcval
		V_ESTADO_PED VEN0004.PEDSAL%TYPE;			-- ESTADO DEL PEDIDO
	BEGIN
		-- ==============================================
		-- CONSULTO LOS PEDIDOS QUE ESTAN EN  
		SELECT MESNUMREQ, MESNUMREQ2, MESNUMREQ3
		INTO V_PEDIDO1, V_PEDIDO2, V_PEDIDO3
		FROM INV00018
		WHERE MESCOD = IN_CODIGO_MESA;

		-- TIPO DE CANCELACION
		-- 1 = CANCELA TODO EL PEIDO
		-- 0 = CANCELA PARTE DEL PEDIDO
		IF (IN_TIPO_CANCELAR = 1) THEN		
			BEGIN			
				-- ==============================================
				-- ACTUALIZO EL ESTADO DE LOS PEDIDOS EN CABECERA Y DETALLE 			
				-- CABECERA
				UPDATE VEN0104
				SET PEDMODCOD = 'CANCEL'
				WHERE PEDNUMDOC = V_PEDIDO1
					OR PEDNUMDOC = V_PEDIDO2
					OR PEDNUMDOC = V_PEDIDO3;
				-- DETALLE
				UPDATE VEN0004
				SET PEDSAL = 'C'
				WHERE PEDNRO IN (SELECT PEDNRO 
				FROM VEN0104
				INNER JOIN INV00018
	                ON MESNUMREQ = PEDNUMDOC
	                OR MESNUMREQ2 = PEDNUMDOC
	                OR MESNUMREQ3 = PEDNUMDOC
	                AND INV00018.MESCOD = VEN0104.MESCOD
	            WHERE INV00018.MESCOD = 11
	                AND PEDNUMDOC = V_PEDIDO1
	                OR PEDNUMDOC = V_PEDIDO2
	                OR PEDNUMDOC = V_PEDIDO3);
				-- ==============================================
				-- ACTUALIZO LOS PEDIDOS DE LA MESA
				UPDATE INV00018
				SET MESNUMREQ = '',
					MESNUMREQ2 = '',
					MESNUMREQ3 = '',
					MESUSUREQ = '',
					MESDOCREQ = '',
					MESESTADO = 'Activo'
				WHERE MESCOD = IN_CODIGO_MESA;
			END;
		ELSE		
			BEGIN
				-- ==============================================
				-- RECORRE LOS PLATOS QUE SE VAN A CANCELAR
				FOR I IN IN_PLATOS_CANCELAR.FIRST..IN_PLATOS_CANCELAR.LAST
				LOOP
					-- NUMERO DE PEDIDO DEL PLATO QUE SE CANCELA 
					SELECT PEDNRO
					INTO V_NUM_PEDIDO
					FROM VEN0004
					WHERE PEDPROCOD = CAST(IN_PLATOS_CANCELAR(I) AS CHAR(20))
					    AND CCOCOD =  CAST(IN_PUESTO(I) AS CHAR(3))
					    AND PEDSAL != 'C';
					-- CANTIDAD DE LO PEDIDO, LA CANTIDAD QUE FALTA POR ENTREGAR
					SELECT TO_NUMBER(PEDUNI), PEDCHECK
					INTO V_CANT_PEDIDO, V_CANT_FALTAN
					FROM VEN0004
					INNER JOIN VEN0104 
	    				ON VEN0004.PEDNRO = VEN0104.PEDNRO    
					WHERE CCOCOD = CAST(IN_PUESTO(I) AS CHAR(3))
						AND PEDPROCOD = CAST(IN_PLATOS_CANCELAR(I) AS CHAR(20))
						AND MESCOD = CAST(IN_CODIGO_MESA AS NUMBER)
						AND PEDSAL != 'C';
					-- CANTIDAD DE PEDIDOS CON ESE NUMERO DE PEDIDO 
					SELECT COUNT(*)
					INTO V_CONTADOR
					FROM VEN0004 
					WHERE PEDNRO = V_NUM_PEDIDO
						AND PEDSAL = 'N';		
					-- ==============================================
					-- SI ES EL UNICO PEDIDO AL RESTAURATE ES CANCELADO, SE CANCELA EL DETALLE Y LA CABECERA
					IF (IN_CANTIDAD(I) = V_CANT_FALTAN AND V_CONTADOR = 1 AND V_CANT_PEDIDO = V_CANT_FALTAN) THEN
						BEGIN
							RAISE_APPLICATION_ERROR(-20001, 'ACTUALIZA LA MESA OME!');
							-- SE ACTUALIZA EL DETALLE DEL PEDIDO COLOCANDOLO CANCELADO
							UPDATE VEN0004
							SET PEDSAL = 'C'
							WHERE PEDNRO = V_NUM_PEDIDO
								AND CCOCOD =  CAST(IN_PUESTO(I) AS CHAR(3));
							-- SE ACTUALIZA LA CABECERA DEL PEDIDO COLOCANDOLO CANCELADO
							UPDATE VEN0104
							SET PEDMODCOD = 'CANCEL'
							WHERE PEDNRO = V_NUM_PEDIDO;
							-- CONSULTO EL CODIGO DE LA EMPRESA QUE TIENE EL PEDIDO QUE SE VA A CANCELAR
							SELECT PEDEMPC 
							INTO V_CODIGO_EMPRESA
							FROM VEN0004
							WHERE PEDNRO = V_NUM_PEDIDO;
							-- QUITA EL NUMERO DEL PEDIO DE LA MESA
							CASE V_CODIGO_EMPRESA
								WHEN '901.023.461-1' THEN
									BEGIN
										UPDATE INV00018
										SET MESNUMREQ = ''
										WHERE MESCOD = IN_CODIGO_MESA;
									END;

								WHEN '901.023.461-2' THEN
									BEGIN
										UPDATE INV00018										
										SET MESNUMREQ2 = ''
										WHERE MESCOD = IN_CODIGO_MESA;
									END;

								ELSE 
									BEGIN
										UPDATE INV00018
										SET MESNUMREQ3 = ''
										WHERE MESCOD = IN_CODIGO_MESA;
									END;
							END CASE;
						END;
					-- ==============================================
					-- SI LA CANTIDAD A CANCELAR ES MAYOS A LA CANTIDAD DE PEDIDOS POR ENTREGAR
					ELSIF (V_CANT_FALTAN < IN_CANTIDAD(I)) THEN 
						BEGIN
							RAISE_APPLICATION_ERROR(-20001, 'No se pueden cancelar pedidos que ya han sido entregados');
						END;
					-- ==============================================
					-- SI LA CANTIDAD A CANCELAR ES MENOR A LA CANTIDAD DE PEDIDOS POR ENTREGAR
					ELSIF (IN_CANTIDAD(I) <= V_CANT_FALTAN) THEN						
						BEGIN
							-- ==============================================
							-- ACTUALIZAR PEDIDO CON LA CANTIDAD QUITADA CON PRECIOS INCLUIDOS 							
							--CONSULTA LA CANTIDAD DEL PEDIDO RESTANDOLE LO QUE SE VA A CANCELAR
							SELECT PEDUNI - CAST(IN_CANTIDAD(I) AS NUMBER)
							INTO V_CANTIDAD
							FROM VEN0004
							WHERE CCOCOD = CAST(IN_PUESTO(I) AS NUMBER)
								AND PEDNRO = V_NUM_PEDIDO
								AND PEDPROCOD = CAST(IN_PLATOS_CANCELAR(I) AS CHAR(20));
							-- CONSULTA EL VALOR DEL PRODUCTO CON IVA INCLUIDO JUNTO CON LA CANTIDAD PEDIDA
							SELECT PEDVALIVA * V_CANTIDAD, PEDVAL
							INTO V_VALOR_ITEM_IVA, V_PRECIO_ITEM
							FROM VEN0004
							WHERE CCOCOD = CAST(IN_PUESTO(I) AS NUMBER)
								AND PEDNRO = V_NUM_PEDIDO
								AND PEDPROCOD = CAST(IN_PLATOS_CANCELAR(I) AS CHAR(20));
							--
							SELECT RFPORDTO
							INTO V_RFPORDTO
						    FROM VEN0001 A
						    INNER JOIN VEN0004 B
								ON A.VENEMPPAI = B.PEDPAIC
								AND A.VENEMPC = B.PEDEMPC
								AND A.PROCOD = B.PEDPROCOD 
						    WHERE A.PROCOD = CAST(IN_PLATOS_CANCELAR(I) AS CHAR(20))
						      	AND B.PEDNRO = V_NUM_PEDIDO;
						    --
						    IF(V_RFPORDTO > 0) THEN
								BEGIN
									V_VALDESC := (V_PRECIO_ITEM * V_CANTIDAD * V_RFPORDTO) / 100;
								END;
							ELSE
								BEGIN
									V_RFPORDTO := 0;
									V_VALDESC := 0;
								END;
							END IF;

							
							-- ==============================================
							-- SI LA CANTIDAD A CANCELAR MENOS LA CANTIDAD POR ENTREGAR DA CERO 
							IF((V_CANT_FALTAN - IN_CANTIDAD(I)) = 0) THEN 
								BEGIN
									V_ESTADO_PED := 'T';
								END;
							ELSE 
								BEGIN
									V_ESTADO_PED := 'N';
								END;
							END IF;
							-- ACTUALIZA EL PEDIDO 
							UPDATE VEN0004
							SET PEDUNI = V_CANTIDAD,
								PEDPORDC = V_RFPORDTO,
								PEDDCVAL = V_VALDESC,
								PEDVALTUN = V_CANTIDAD * V_VALOR_ITEM_IVA,
								PEDCHECK = V_CANT_FALTAN - IN_CANTIDAD(I),
								PEDSAL = V_ESTADO_PED
							WHERE CCOCOD = CAST(IN_PUESTO(I) AS NUMBER)
								AND PEDNRO = V_NUM_PEDIDO
								AND PEDPROCOD = CAST(IN_PLATOS_CANCELAR(I) AS CHAR(20));


							/*RAISE_APPLICATION_ERROR(-20001, 'V_CANTIDAD: '||V_CANTIDAD
								||', V_VALOR_ITEM_IVA: '||V_VALOR_ITEM_IVA
								||', V_PRECIO_ITEM: '||V_PRECIO_ITEM
								||', V_RFPORDTO: '||V_RFPORDTO
								||', V_VALDESC: '||V_VALDESC);*/

							

						END;
					END IF;

				END LOOP;
			END;
		END IF;

	END SP_ACOMER_PEDIDOS_CANCEL;

-- =============================================
-- PROCEDIMIENTO PARA PEDIDOS A ENTREGAR
	PROCEDURE SP_ACOMER_PEDIDOS_ENTREGAR
	(
		CURSOR_PEDIDOS OUT SYS_REFCURSOR  -- CURSOR QUE TRAE LOS PEDIDOS QUE YA ESTAN LISTOS PARA ENTREGAR
	)
	AS
		V_COUNT NUMBER; -- CONTAR LOS REGISTROS 
	BEGIN
		SELECT COUNT(*)
		INTO V_COUNT
		FROM INV00018 INV1    
		INNER JOIN VEN0104 VEN1
		    ON INV1.MESNUMREQ = VEN1.PEDNUMDOC
		    OR INV1.MESNUMREQ2 = VEN1.PEDNUMDOC
		    OR INV1.MESNUMREQ3 = VEN1.PEDNUMDOC
		INNER JOIN VEN0004 VEN2
		    ON VEN1.PEDNRO = VEN2.PEDNRO
		WHERE VEN2.PEDSAL = 'T'
		ORDER BY VEN1.PEDEMPC;

		IF(V_COUNT = 0) THEN
			BEGIN
				OPEN CURSOR_PEDIDOS FOR
					SELECT 'NO' ESTADO,
					    'NO' MESA,
					    'NO' EMPRESA
					FROM DUAL;
			END;
		ELSE
			BEGIN
				OPEN CURSOR_PEDIDOS FOR
					SELECT VEN2.PEDSAL ESTADO,
					    VEN1.MESCOD MESA,
					    VEN1.PEDEMPC EMPRESA
					FROM INV00018 INV1    
					INNER JOIN VEN0104 VEN1
					    ON INV1.MESNUMREQ = VEN1.PEDNUMDOC
					    OR INV1.MESNUMREQ2 = VEN1.PEDNUMDOC
					    OR INV1.MESNUMREQ3 = VEN1.PEDNUMDOC
					INNER JOIN VEN0004 VEN2
					    ON VEN1.PEDNRO = VEN2.PEDNRO
					WHERE VEN2.PEDSAL = 'T'
					ORDER BY VEN1.PEDEMPC;
			END;
		END IF;		
	END SP_ACOMER_PEDIDOS_ENTREGAR;

END;